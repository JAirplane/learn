@using System.Text.RegularExpressions

<div class="col-sm-12 col-md-4 p-3 text-center">
	<div class="game-name">
		<a href="@url">@Game.Name</a>
	</div>
	<hr class="hr-fix"/>

	<div class="card-image">
		<a href="@url">
			@if(IsBase64(Game.ImageLink))
			{
				<img src="data:image/jpeg;base64,@Game.ImageLink" class="game-image" />
			}
			else
			{
				<img src="@Game.ImageLink" alt="@Game.Name" class="game-image" />
			}
		</a>
	</div>
	<hr class="hr-fix" />

	<div class="game-card-footer">
		<div class="btn-group my-3 text-center" role="group">
			<a href="#" class="btn btn-outline-info">
				<i class="fa-solid fa-pen-to-square"/>
			</a>
			<button type="button" class="btn btn-outline-danger" @onclick="(() => OnDeleteGame.InvokeAsync(Game))">
				<i class="fa-solid fa-trash-can" />
			</button>
		</div>
	</div>
</div>

@code {
	[Parameter]
	public GameModel Game { get; set; }
	[Parameter]
	public EventCallback<GameModel> OnDeleteGame { get; set; }

	private string url = string.Empty;

	protected override void OnInitialized()
	{
		// url = $"/games/{Game.Id}/{Game.Name.Replace(" ", "-")}";
		url = $"/games/{Game.Id}/{Uri.EscapeDataString(Game.Name)}";
	}

	public bool IsBase64(string value)
	{
		value = value.Trim();
		return (value.Length % 4 == 0 && Regex.IsMatch(value, @"^[a-zA-Z0-9\+/]*={0,3}$", RegexOptions.None));
	}
}
