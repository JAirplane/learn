@using System.Timers
@typeparam TItem

<div class="typeahead">
	<div class="typeahead-controls">
		<input type="text" class="typeahead-input" autocomplete="off"
				placeholder="@OnPlaceHolder"
				@bind-value="SearchText"
				@bind-value:event="oninput"
				@onclick="ShowResults"
				@onfocusout="FocusOut"/>
	</div>
	@if(isSearching)
	{
		<div class="typeahead-all-results">
			<div class="typeahead-result">
				<span>Loading...</span>
			</div>
		</div>
	}
	else if(ShowAllResults())
	{
		<div class="typeahead-all-results">
			@foreach (var item in results)
			{
				<div @key="@item" class="typeahead-result" tabindex="0"
					@onclick="@(() => SelectResult(item))"
					@onmouseover="MouseOverHandler"
					@onmouseout="MouseOutHandler">
					@ResultTemplate(item)
				</div>
			}
		</div>
	}
	else if(NothingFound())
	{
		<div class="typeahead-all-results">
			@if(NotFoundTemplate != null)
			{
				<div class="typeahead-notfound">
					@NotFoundTemplate
				</div>
			}
			else
			{
				<div class="typeahead-notfound">
					<span>No Results</span>
				</div>
			}
		</div>
	}
</div>

@code {
	private bool isSearching;
	private bool showingAllResults;
	private bool isMouseOver;
	Timer timer;

	private string searchText = string.Empty;
	private string SearchText
	{
		get => searchText;
		set
		{
			searchText = value;
			if(value.Length == 0)
			{
				showingAllResults = false;
				timer.Stop();
				results = new();
			}
			else if(value.Length >= OnMinimalLength)
			{
				timer.Stop();
				timer.Start();
			}
		}
	}
	protected List<TItem> results = new();
	[Parameter]
	public string? OnPlaceHolder{ get; set; }
	[Parameter]
	public int OnMinimalLength { get; set; } = 3;
	[Parameter]
	public EventCallback<TItem> OnValueChangedHandler { get; set; }
	[Parameter]
	public RenderFragment<TItem> ResultTemplate { get; set; }
	[Parameter]
	public RenderFragment NotFoundTemplate { get; set; }
	[Parameter]
	public int OnTimerInterval { get; set; } = 300;
	[Parameter]
	public Func<string, Task<IEnumerable<TItem>>> OnSearchHandler{ get; set; }
	protected override void OnInitialized()
	{
		timer = new();
		timer.Interval = OnTimerInterval;
		timer.AutoReset = false;
		timer.Elapsed += Search;
	}
	protected async void Search(object sender, ElapsedEventArgs args)
	{
		isSearching = true;
		showingAllResults = false;
		await InvokeAsync(StateHasChanged);
		results = (await OnSearchHandler.Invoke(searchText)).ToList();
		isSearching = false;
		showingAllResults = true;
		await InvokeAsync(StateHasChanged);
	}
	void ShowResults()
	{
		if(results.Any())
		{
			showingAllResults = true;
		}
	}
	void FocusOut()
	{
		if(!isMouseOver)
		{
			showingAllResults = false;
		}
	}
	bool ShowAllResults()
	{
		return showingAllResults && results.Any();
	}
	async Task SelectResult(TItem item)
	{
		SearchText = string.Empty;
		await OnValueChangedHandler.InvokeAsync(item);
	}
	bool NothingFound()
	{
		return !results.Any() && showingAllResults;
	}
	void MouseOverHandler()
	{
		isMouseOver = true;
	}
	void MouseOutHandler()
	{
		isMouseOver = false;
	}
}
